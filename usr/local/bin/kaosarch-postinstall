#!/bin/bash

#========== COLORS ==========
GREEN='\033[1;32m'
RED='\033[1;31m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
RESET='\033[0m'

#========== DESKTOP SETUP ==========

detect_desktop_and_configure() {
    desktop_file=$(ls /usr/share/xsessions/*.desktop 2>/dev/null | head -n 1)
    desktop=$(basename "$desktop_file")
    echo -e "${YELLOW}Detected desktop session: $desktop${RESET}"

    case "$desktop" in
        chadwm.desktop) configure_chadwm ;;
        *) echo -e "${YELLOW}No specific action for desktop: $desktop${RESET}" ;;
    esac
}

configure_chadwm() {
    echo -e "${GREEN}Applying ChadWM configurations...${RESET}"
    user=$(getent passwd 1000 | cut -d: -f1)
    echo -e "${BLUE}Building ChadWM for user: $user${RESET}"
    config_dir="/home/$user/.config/arco-chadwm/chadwm"

    if [[ -d "$config_dir" ]]; then
        cd "$config_dir" || exit 1
        make -B && sudo make install
    else
        echo -e "${RED}Directory $config_dir not found. Skipping build.${RESET}"
    fi
}

#========== PACMAN LOCK CHECK ==========

check_pacman_lock() {
    seconds=0
    while [ -e "/var/lib/pacman/db.lck" ]; do
        echo -e "${YELLOW}Pacman is not ready. Retrying in 5 seconds...${RESET}"
        sleep 5
        seconds=$((seconds + 5))
        if [[ "$seconds" -ge 30 ]]; then
            echo -e "${RED}Removing stale pacman lock file.${RESET}"
            rm -f /var/lib/pacman/db.lck
            break
        fi
    done
}

#========== VM CLEANUP FUNCTIONS ==========

remove_vmware() {
    echo -e "${GREEN}Cleaning up VMware packages...${RESET}"
    rm -f /etc/xdg/autostart/vmware-user.desktop

    pacman -Qi open-vm-tools &>/dev/null && {
        systemctl disable vmware-vmblock-fuse.service vmtoolsd.service
        pacman -Rns open-vm-tools --noconfirm
    }

    pacman -Qi xf86-video-vmware &>/dev/null && {
        pacman -Rns xf86-video-vmware --noconfirm
    }

    rm -f /etc/systemd/system/multi-user.target.wants/vmtoolsd.service
}

remove_qemu() {
    echo -e "${GREEN}Cleaning up QEMU guest agent...${RESET}"
    pacman -Qi qemu-guest-agent &>/dev/null && {
        systemctl disable qemu-guest-agent.service
        pacman -Rns qemu-guest-agent --noconfirm
    }
}

remove_virtualbox() {
    echo -e "${GREEN}Cleaning up VirtualBox guest utils...${RESET}"
    for pkg in virtualbox-guest-utils virtualbox-guest-utils-nox; do
        pacman -Qi "$pkg" &>/dev/null && {
            systemctl disable vboxservice.service
            pacman -Rns "$pkg" --noconfirm
        }
    done
}

cleanup_none_case() {
    remove_vmware
    remove_virtualbox
    remove_qemu

    rm -f /etc/systemd/system/multi-user.target.wants/virtual-machine-check.service
    echo -e "${GREEN}Removed AVM check leftovers.${RESET}"
}

virtual_machine_cleanup() {
    check_pacman_lock

    result=$(systemd-detect-virt)
    echo -e "${GREEN}Detected virtualization: $result${RESET}"

    case "$result" in
        oracle) remove_vmware; remove_qemu ;;
        kvm)    remove_vmware; remove_virtualbox ;;
        vmware) remove_virtualbox; remove_qemu ;;
        none)   cleanup_none_case ;;
        *)      echo -e "${YELLOW}Unknown virtualization: $result. Skipping cleanup.${RESET}" ;;
    esac
}

#========== MAIN EXECUTION ==========

echo -e "${BLUE}######################################################"
echo -e "#     Begin kaosarch-postinstall"
echo -e "######################################################${RESET}"

echo -e "${BLUE}###########################################"
echo -e "#     Start Chadwm build"
echo -e "###########################################${RESET}"

detect_desktop_and_configure

echo -e "${BLUE}###########################################"
echo -e "#     End Chadwm build"
echo -e "###########################################${RESET}"

echo -e "${BLUE}###########################################"
echo -e "#     Start virtual machine check"
echo -e "###########################################${RESET}"

virtual_machine_cleanup

echo -e "${BLUE}########################################"
echo -e "#      End virtual machine check"
echo -e "########################################${RESET}"

echo -e "${BLUE}######################################################"
echo -e "#      End kaosarch-postinstall"
echo -e "######################################################${RESET}"
